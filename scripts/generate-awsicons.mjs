/* eslint-disable no-console */
import { promises as fs } from 'node:fs';
import path from 'node:path';

const projectRoot = process.cwd();
const publicDir = path.join(projectRoot, 'public');
const awsBase = path.join(publicDir, 'awsicons');

const SERVICE_DIR = path.join(awsBase, 'Architecture-Service-Icons');
const GROUP_DIR = path.join(awsBase, 'Architecture-Group-Icons');

const OUTPUT = path.join(projectRoot, 'src', 'app', 'lib', 'awsicons.js');

const isImage = (n) => /\.(svg|png)$/i.test(n);
const isHighDpiPng = (p) => /@[\dx]+\.png$/i.test(p);
const includes64 = (p) => p.split(path.sep).includes('64') || /_64\.(svg|png)$/i.test(path.basename(p));
const toWebPath = (full) => '/' + path.relative(publicDir, full).split(path.sep).join('/');
const toKey = (full) => {
  const base = path.basename(full).replace(/\.(svg|png)$/i, '');
  const trimmed = base.startsWith('Arch_') ? base.slice(5) : base;
  return trimmed.replace(/_64$/i, '');
};

async function* walk(dir) {
  const items = await fs.readdir(dir, { withFileTypes: true });
  for (const it of items) {
    const full = path.join(dir, it.name);
    if (it.isDirectory()) yield* walk(full);
    else if (it.isFile()) yield full;
  }
}

// scoring: prefer SVG, then prefer 64-sized asset
function score(file) {
  const svg = String(file).toLowerCase().endsWith('.svg') ? 1 : 0;
  const s64 = includes64(file) ? 1 : 0;
  return svg * 10 + s64; // svg beats png, 64 beats other sizes
}

function pickBetter(a, b) {
  return score(a) >= score(b) ? a : b;
}

async function collectMap(rootDir, { only64 = true } = {}) {
  const map = new Map();
  try {
    await fs.access(rootDir);
  } catch {
    return map;
  }
  for await (const file of walk(rootDir)) {
    if (!isImage(file)) continue;
    if (isHighDpiPng(file)) continue;
    if (only64 && !includes64(file)) continue;

    const key = toKey(file);
    const prev = map.get(key);
    if (!prev) map.set(key, file);
    else map.set(key, pickBetter(file, prev));
  }
  return map;
}

async function run() {
  // services: 64px only; groups: any size (prefer 64 if present)
  const serviceMap = await collectMap(SERVICE_DIR, { only64: true });
  const groupMap = await collectMap(GROUP_DIR, { only64: false });

  const serviceEntries = [...serviceMap.entries()]
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([k, v]) => `  "${k}": "${toWebPath(v)}",`)
    .join('\n');

  const groupEntries = [...groupMap.entries()]
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([k, v]) => `  "${k}": "${toWebPath(v)}",`)
    .join('\n');

  const content = `// THIS FILE IS AUTO-GENERATED by scripts/generate-awsicons.mjs
// Do not edit by hand. Re-run the generator if assets change.

export const awsIcons = {
${serviceEntries}
};

export const awsGroupIcons = {
${groupEntries}
};

export default awsIcons;
`;

  await fs.mkdir(path.dirname(OUTPUT), { recursive: true });
  await fs.writeFile(OUTPUT, content, 'utf8');

  console.log(`Generated \${path.relative(projectRoot, OUTPUT)} with \${serviceMap.size} service icons and \${groupMap.size} group icons.`);
}

run().catch((e) => {
  console.error(e);
  process.exit(1);
});